/*
 * ShellSmartPayAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.shell.apitest.ShellSmartPayAPIClient;
import com.shell.apitest.exceptions.ApiException;
import io.apimatic.core.utilities.TestHelper;
import java.util.LinkedHashMap;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class FuelingControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static ShellSmartPayAPIClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static FuelingController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getFuelingController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * The Digital Payments Service enables 3rd Parties to trigger the refuel process which, if
     * successful, will unlock a pump/nozzle ready for fuelling. Enables a 3rd party to request an
     * access token to start using fueling. APIs.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestMppToken() throws Exception {
        // Parameters for the API call
        String grantType = 
                "client_credentials";
        String clientId = 
                "b2bmpp-cli";
        String clientSecret = 
                "f20935d8f14a44bd1f0923cc4c4fa63f7b25922330cd5080f735f1a2769ece77ce245cfe8ba4cbd2a5"
                + "8544ee5113c200b8e37a7be33311e4b6f3c785bf3f37d2";

        // Set callback and perform API call
        try {
            controller.mppToken(grantType, clientId, clientSecret);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

    /**
     * Enables a partner user to cancel pump reservation from the App.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestMppCancelFueling() throws Exception {
        // Parameters for the API call
        String mppTransactionId = 
                "000000001C48";

        // Set callback and perform API call
        try {
            controller.mppCancelFueling(mppTransactionId);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Enables a partner user to cancel pump reservation from the App.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestMppCancelFueling1() throws Exception {
        // Parameters for the API call
        String mppTransactionId = 
                "000000001C48";

        // Set callback and perform API call
        try {
            controller.mppCancelFueling(mppTransactionId);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 204", 
                204, httpResponse.getResponse().getStatusCode());

    }

}
