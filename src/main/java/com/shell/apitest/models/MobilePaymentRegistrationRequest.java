/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for MobilePaymentRegistrationRequest type.
 */
public class MobilePaymentRegistrationRequest {
    private String referenceId;
    private String pan;
    private String panExpiry;
    private int period;
    private String accountId;
    private String payerId;
    private String colCoId;
    private List<CollectingCompany> collectingCompanies;

    /**
     * Default constructor.
     */
    public MobilePaymentRegistrationRequest() {
    }

    /**
     * Initialization constructor.
     * @param  referenceId  String value for referenceId.
     * @param  pan  String value for pan.
     * @param  panExpiry  String value for panExpiry.
     * @param  period  int value for period.
     * @param  accountId  String value for accountId.
     * @param  payerId  String value for payerId.
     * @param  colCoId  String value for colCoId.
     * @param  collectingCompanies  List of CollectingCompany value for collectingCompanies.
     */
    public MobilePaymentRegistrationRequest(
            String referenceId,
            String pan,
            String panExpiry,
            int period,
            String accountId,
            String payerId,
            String colCoId,
            List<CollectingCompany> collectingCompanies) {
        this.referenceId = referenceId;
        this.pan = pan;
        this.panExpiry = panExpiry;
        this.period = period;
        this.accountId = accountId;
        this.payerId = payerId;
        this.colCoId = colCoId;
        this.collectingCompanies = collectingCompanies;
    }

    /**
     * Getter for ReferenceId.
     * Unique Reference ID the DPAN is registered to. The Reference ID has been implemented to
     * accept normal alphanumeric characters plus the following ‘special characters’&amp;colon; dot,
     * underscore and hyphen. The following characters are not acceptable&amp;colon; , / {@literal @} ! &amp;num; &amp; *
     * ()
     * @return Returns the String
     */
    @JsonGetter("referenceId")
    public String getReferenceId() {
        return referenceId;
    }

    /**
     * Setter for ReferenceId.
     * Unique Reference ID the DPAN is registered to. The Reference ID has been implemented to
     * accept normal alphanumeric characters plus the following ‘special characters’&amp;colon; dot,
     * underscore and hyphen. The following characters are not acceptable&amp;colon; , / {@literal @} ! &amp;num; &amp; *
     * ()
     * @param referenceId Value for String
     */
    @JsonSetter("referenceId")
    public void setReferenceId(String referenceId) {
        this.referenceId = referenceId;
    }

    /**
     * Getter for Pan.
     * Original card PAN (generated on creation of Card (see Card Order Service))
     * @return Returns the String
     */
    @JsonGetter("pan")
    public String getPan() {
        return pan;
    }

    /**
     * Setter for Pan.
     * Original card PAN (generated on creation of Card (see Card Order Service))
     * @param pan Value for String
     */
    @JsonSetter("pan")
    public void setPan(String pan) {
        this.pan = pan;
    }

    /**
     * Getter for PanExpiry.
     * Expiry Date associated with the PAN in format YYMM.
     * @return Returns the String
     */
    @JsonGetter("panExpiry")
    public String getPanExpiry() {
        return panExpiry;
    }

    /**
     * Setter for PanExpiry.
     * Expiry Date associated with the PAN in format YYMM.
     * @param panExpiry Value for String
     */
    @JsonSetter("panExpiry")
    public void setPanExpiry(String panExpiry) {
        this.panExpiry = panExpiry;
    }

    /**
     * Getter for Period.
     * Specifies how many months the DPAN should be valid for. If not present, the Token Server
     * determines the expiry date using its default algorithm. Note that the Token Server might not
     * respect this value and use configured business rules to override the requested validity
     * period
     * @return Returns the int
     */
    @JsonGetter("period")
    public int getPeriod() {
        return period;
    }

    /**
     * Setter for Period.
     * Specifies how many months the DPAN should be valid for. If not present, the Token Server
     * determines the expiry date using its default algorithm. Note that the Token Server might not
     * respect this value and use configured business rules to override the requested validity
     * period
     * @param period Value for int
     */
    @JsonSetter("period")
    public void setPeriod(int period) {
        this.period = period;
    }

    /**
     * Getter for AccountId.
     * In Shell, a Payer can have several accounts (representing company branches, divisions or
     * generally different cost-centers that a customer wants to group cards on). You can specify
     * this property or the AccountNumber.
     * @return Returns the String
     */
    @JsonGetter("AccountId")
    public String getAccountId() {
        return accountId;
    }

    /**
     * Setter for AccountId.
     * In Shell, a Payer can have several accounts (representing company branches, divisions or
     * generally different cost-centers that a customer wants to group cards on). You can specify
     * this property or the AccountNumber.
     * @param accountId Value for String
     */
    @JsonSetter("AccountId")
    public void setAccountId(String accountId) {
        this.accountId = accountId;
    }

    /**
     * Getter for PayerId.
     * The Payer Id, or the Customer Id of the Payment Customer. In Shell, a Payer is a customer
     * belonging to a specific market geography. A Payer can have several Accounts; each account can
     * then have different groups of cards.
     * @return Returns the String
     */
    @JsonGetter("PayerId")
    public String getPayerId() {
        return payerId;
    }

    /**
     * Setter for PayerId.
     * The Payer Id, or the Customer Id of the Payment Customer. In Shell, a Payer is a customer
     * belonging to a specific market geography. A Payer can have several Accounts; each account can
     * then have different groups of cards.
     * @param payerId Value for String
     */
    @JsonSetter("PayerId")
    public void setPayerId(String payerId) {
        this.payerId = payerId;
    }

    /**
     * Getter for ColCoId.
     * The ID of the Collecting Company (in GFN), also known as Shell Code of the selected payer.
     * This property is mandatory if the ColCoCode code is not passed
     * @return Returns the String
     */
    @JsonGetter("ColCoId")
    public String getColCoId() {
        return colCoId;
    }

    /**
     * Setter for ColCoId.
     * The ID of the Collecting Company (in GFN), also known as Shell Code of the selected payer.
     * This property is mandatory if the ColCoCode code is not passed
     * @param colCoId Value for String
     */
    @JsonSetter("ColCoId")
    public void setColCoId(String colCoId) {
        this.colCoId = colCoId;
    }

    /**
     * Getter for CollectingCompanies.
     * Array of Colco Ids
     * @return Returns the List of CollectingCompany
     */
    @JsonGetter("CollectingCompanies")
    public List<CollectingCompany> getCollectingCompanies() {
        return collectingCompanies;
    }

    /**
     * Setter for CollectingCompanies.
     * Array of Colco Ids
     * @param collectingCompanies Value for List of CollectingCompany
     */
    @JsonSetter("CollectingCompanies")
    public void setCollectingCompanies(List<CollectingCompany> collectingCompanies) {
        this.collectingCompanies = collectingCompanies;
    }

    /**
     * Converts this MobilePaymentRegistrationRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "MobilePaymentRegistrationRequest [" + "referenceId=" + referenceId + ", pan=" + pan
                + ", panExpiry=" + panExpiry + ", period=" + period + ", accountId=" + accountId
                + ", payerId=" + payerId + ", colCoId=" + colCoId + ", collectingCompanies="
                + collectingCompanies + "]";
    }

    /**
     * Builds a new {@link MobilePaymentRegistrationRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link MobilePaymentRegistrationRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(referenceId, pan, panExpiry, period, accountId, payerId,
                colCoId, collectingCompanies);
        return builder;
    }

    /**
     * Class to build instances of {@link MobilePaymentRegistrationRequest}.
     */
    public static class Builder {
        private String referenceId;
        private String pan;
        private String panExpiry;
        private int period;
        private String accountId;
        private String payerId;
        private String colCoId;
        private List<CollectingCompany> collectingCompanies;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  referenceId  String value for referenceId.
         * @param  pan  String value for pan.
         * @param  panExpiry  String value for panExpiry.
         * @param  period  int value for period.
         * @param  accountId  String value for accountId.
         * @param  payerId  String value for payerId.
         * @param  colCoId  String value for colCoId.
         * @param  collectingCompanies  List of CollectingCompany value for collectingCompanies.
         */
        public Builder(String referenceId, String pan, String panExpiry, int period,
                String accountId, String payerId, String colCoId,
                List<CollectingCompany> collectingCompanies) {
            this.referenceId = referenceId;
            this.pan = pan;
            this.panExpiry = panExpiry;
            this.period = period;
            this.accountId = accountId;
            this.payerId = payerId;
            this.colCoId = colCoId;
            this.collectingCompanies = collectingCompanies;
        }

        /**
         * Setter for referenceId.
         * @param  referenceId  String value for referenceId.
         * @return Builder
         */
        public Builder referenceId(String referenceId) {
            this.referenceId = referenceId;
            return this;
        }

        /**
         * Setter for pan.
         * @param  pan  String value for pan.
         * @return Builder
         */
        public Builder pan(String pan) {
            this.pan = pan;
            return this;
        }

        /**
         * Setter for panExpiry.
         * @param  panExpiry  String value for panExpiry.
         * @return Builder
         */
        public Builder panExpiry(String panExpiry) {
            this.panExpiry = panExpiry;
            return this;
        }

        /**
         * Setter for period.
         * @param  period  int value for period.
         * @return Builder
         */
        public Builder period(int period) {
            this.period = period;
            return this;
        }

        /**
         * Setter for accountId.
         * @param  accountId  String value for accountId.
         * @return Builder
         */
        public Builder accountId(String accountId) {
            this.accountId = accountId;
            return this;
        }

        /**
         * Setter for payerId.
         * @param  payerId  String value for payerId.
         * @return Builder
         */
        public Builder payerId(String payerId) {
            this.payerId = payerId;
            return this;
        }

        /**
         * Setter for colCoId.
         * @param  colCoId  String value for colCoId.
         * @return Builder
         */
        public Builder colCoId(String colCoId) {
            this.colCoId = colCoId;
            return this;
        }

        /**
         * Setter for collectingCompanies.
         * @param  collectingCompanies  List of CollectingCompany value for collectingCompanies.
         * @return Builder
         */
        public Builder collectingCompanies(List<CollectingCompany> collectingCompanies) {
            this.collectingCompanies = collectingCompanies;
            return this;
        }

        /**
         * Builds a new {@link MobilePaymentRegistrationRequest} object using the set fields.
         * @return {@link MobilePaymentRegistrationRequest}
         */
        public MobilePaymentRegistrationRequest build() {
            return new MobilePaymentRegistrationRequest(referenceId, pan, panExpiry, period,
                    accountId, payerId, colCoId, collectingCompanies);
        }
    }
}
