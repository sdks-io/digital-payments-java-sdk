/*
 * ShellSmartPayAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for DeviceDetail type.
 */
public class DeviceDetail {
    private String deviceId;
    private String model;
    private String osVersion;
    private String otherDeviceInformation;

    /**
     * Default constructor.
     */
    public DeviceDetail() {
    }

    /**
     * Initialization constructor.
     * @param  deviceId  String value for deviceId.
     * @param  model  String value for model.
     * @param  osVersion  String value for osVersion.
     * @param  otherDeviceInformation  String value for otherDeviceInformation.
     */
    public DeviceDetail(
            String deviceId,
            String model,
            String osVersion,
            String otherDeviceInformation) {
        this.deviceId = deviceId;
        this.model = model;
        this.osVersion = osVersion;
        this.otherDeviceInformation = otherDeviceInformation;
    }

    /**
     * Getter for DeviceId.
     * This is the mobile device’s unique ID (Vendor ID for iOS vs. Android ID for Android). This is
     * only used for transactions made via the Shell Mobile App and will therefore be mandatory for
     * requests originating from Shell’s mobile app but can be ignored by all other parties.
     * @return Returns the String
     */
    @JsonGetter("deviceId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDeviceId() {
        return deviceId;
    }

    /**
     * Setter for DeviceId.
     * This is the mobile device’s unique ID (Vendor ID for iOS vs. Android ID for Android). This is
     * only used for transactions made via the Shell Mobile App and will therefore be mandatory for
     * requests originating from Shell’s mobile app but can be ignored by all other parties.
     * @param deviceId Value for String
     */
    @JsonSetter("deviceId")
    public void setDeviceId(String deviceId) {
        this.deviceId = deviceId;
    }

    /**
     * Getter for Model.
     * This is the mobile device’s model (machine name/systemInfo for iOS vs. Build.MODEL for
     * Android). This is only used for transactions made via the Shell Mobile App and will therefore
     * be mandatory for requests originating from Shell’s mobile app but can be ignored by all other
     * parties.
     * @return Returns the String
     */
    @JsonGetter("model")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getModel() {
        return model;
    }

    /**
     * Setter for Model.
     * This is the mobile device’s model (machine name/systemInfo for iOS vs. Build.MODEL for
     * Android). This is only used for transactions made via the Shell Mobile App and will therefore
     * be mandatory for requests originating from Shell’s mobile app but can be ignored by all other
     * parties.
     * @param model Value for String
     */
    @JsonSetter("model")
    public void setModel(String model) {
        this.model = model;
    }

    /**
     * Getter for OsVersion.
     * This is the mobile device’s OS Version. This is only used for transactions made via the Shell
     * Mobile App and will therefore be mandatory for requests originating from Shell’s mobile app
     * but can be ignored by all other parties.
     * @return Returns the String
     */
    @JsonGetter("osVersion")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getOsVersion() {
        return osVersion;
    }

    /**
     * Setter for OsVersion.
     * This is the mobile device’s OS Version. This is only used for transactions made via the Shell
     * Mobile App and will therefore be mandatory for requests originating from Shell’s mobile app
     * but can be ignored by all other parties.
     * @param osVersion Value for String
     */
    @JsonSetter("osVersion")
    public void setOsVersion(String osVersion) {
        this.osVersion = osVersion;
    }

    /**
     * Getter for OtherDeviceInformation.
     * This is only used for transactions made via Android versions of the Shell Mobile App and will
     * therefore be mandatory for requests originating from Shell’s Android mobile app but can be
     * ignored by all other devices and/or parties. This field is used to capture the Shell App
     * build that was used to make this call.
     * @return Returns the String
     */
    @JsonGetter("otherDeviceInformation")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getOtherDeviceInformation() {
        return otherDeviceInformation;
    }

    /**
     * Setter for OtherDeviceInformation.
     * This is only used for transactions made via Android versions of the Shell Mobile App and will
     * therefore be mandatory for requests originating from Shell’s Android mobile app but can be
     * ignored by all other devices and/or parties. This field is used to capture the Shell App
     * build that was used to make this call.
     * @param otherDeviceInformation Value for String
     */
    @JsonSetter("otherDeviceInformation")
    public void setOtherDeviceInformation(String otherDeviceInformation) {
        this.otherDeviceInformation = otherDeviceInformation;
    }

    /**
     * Converts this DeviceDetail into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "DeviceDetail [" + "deviceId=" + deviceId + ", model=" + model + ", osVersion="
                + osVersion + ", otherDeviceInformation=" + otherDeviceInformation + "]";
    }

    /**
     * Builds a new {@link DeviceDetail.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link DeviceDetail.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .deviceId(getDeviceId())
                .model(getModel())
                .osVersion(getOsVersion())
                .otherDeviceInformation(getOtherDeviceInformation());
        return builder;
    }

    /**
     * Class to build instances of {@link DeviceDetail}.
     */
    public static class Builder {
        private String deviceId;
        private String model;
        private String osVersion;
        private String otherDeviceInformation;



        /**
         * Setter for deviceId.
         * @param  deviceId  String value for deviceId.
         * @return Builder
         */
        public Builder deviceId(String deviceId) {
            this.deviceId = deviceId;
            return this;
        }

        /**
         * Setter for model.
         * @param  model  String value for model.
         * @return Builder
         */
        public Builder model(String model) {
            this.model = model;
            return this;
        }

        /**
         * Setter for osVersion.
         * @param  osVersion  String value for osVersion.
         * @return Builder
         */
        public Builder osVersion(String osVersion) {
            this.osVersion = osVersion;
            return this;
        }

        /**
         * Setter for otherDeviceInformation.
         * @param  otherDeviceInformation  String value for otherDeviceInformation.
         * @return Builder
         */
        public Builder otherDeviceInformation(String otherDeviceInformation) {
            this.otherDeviceInformation = otherDeviceInformation;
            return this;
        }

        /**
         * Builds a new {@link DeviceDetail} object using the set fields.
         * @return {@link DeviceDetail}
         */
        public DeviceDetail build() {
            return new DeviceDetail(deviceId, model, osVersion, otherDeviceInformation);
        }
    }
}
