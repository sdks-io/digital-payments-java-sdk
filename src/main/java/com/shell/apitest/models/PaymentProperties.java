/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for PaymentProperties type.
 */
public class PaymentProperties {
    private String paymentType;
    private String clientMetadataId;
    private String token;
    private String identifier;
    private String network;
    private String cardIdentifier;
    private String odometer;
    private String fleetId;
    private String externalRefId;

    /**
     * Default constructor.
     */
    public PaymentProperties() {
    }

    /**
     * Initialization constructor.
     * @param  cardIdentifier  String value for cardIdentifier.
     * @param  paymentType  String value for paymentType.
     * @param  clientMetadataId  String value for clientMetadataId.
     * @param  token  String value for token.
     * @param  identifier  String value for identifier.
     * @param  network  String value for network.
     * @param  odometer  String value for odometer.
     * @param  fleetId  String value for fleetId.
     * @param  externalRefId  String value for externalRefId.
     */
    public PaymentProperties(
            String cardIdentifier,
            String paymentType,
            String clientMetadataId,
            String token,
            String identifier,
            String network,
            String odometer,
            String fleetId,
            String externalRefId) {
        this.paymentType = paymentType;
        this.clientMetadataId = clientMetadataId;
        this.token = token;
        this.identifier = identifier;
        this.network = network;
        this.cardIdentifier = cardIdentifier;
        this.odometer = odometer;
        this.fleetId = fleetId;
        this.externalRefId = externalRefId;
    }

    /**
     * Getter for PaymentType.
     * The type of payment (e.g. Credit Card, Debit Card)
     * @return Returns the String
     */
    @JsonGetter("paymentType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPaymentType() {
        return paymentType;
    }

    /**
     * Setter for PaymentType.
     * The type of payment (e.g. Credit Card, Debit Card)
     * @param paymentType Value for String
     */
    @JsonSetter("paymentType")
    public void setPaymentType(String paymentType) {
        this.paymentType = paymentType;
    }

    /**
     * Getter for ClientMetadataId.
     * This is only used for PayPal. During the creation of the user’s profile an ID
     * (clientMetadataId) will have been created by PayPal and stored by Shell. Thus, when PayPal
     * payments are made this ID must be included in order for the payment to be processed
     * @return Returns the String
     */
    @JsonGetter("clientMetadataId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getClientMetadataId() {
        return clientMetadataId;
    }

    /**
     * Setter for ClientMetadataId.
     * This is only used for PayPal. During the creation of the user’s profile an ID
     * (clientMetadataId) will have been created by PayPal and stored by Shell. Thus, when PayPal
     * payments are made this ID must be included in order for the payment to be processed
     * @param clientMetadataId Value for String
     */
    @JsonSetter("clientMetadataId")
    public void setClientMetadataId(String clientMetadataId) {
        this.clientMetadataId = clientMetadataId;
    }

    /**
     * Getter for Token.
     * This is only used for ApplePay and AndroidPay. Users using either of these payment methods
     * use device biometrics to authenticate themselves against their respective payment
     * method/provider (e.g. retina, fingerprint). Successful authentication will result in
     * Apple/Android issuing a Payment Token which should be specified here
     * @return Returns the String
     */
    @JsonGetter("token")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getToken() {
        return token;
    }

    /**
     * Setter for Token.
     * This is only used for ApplePay and AndroidPay. Users using either of these payment methods
     * use device biometrics to authenticate themselves against their respective payment
     * method/provider (e.g. retina, fingerprint). Successful authentication will result in
     * Apple/Android issuing a Payment Token which should be specified here
     * @param token Value for String
     */
    @JsonSetter("token")
    public void setToken(String token) {
        this.token = token;
    }

    /**
     * Getter for Identifier.
     * This is the payment identifier and it is only used for ApplePay and AndroidPay.
     * @return Returns the String
     */
    @JsonGetter("identifier")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getIdentifier() {
        return identifier;
    }

    /**
     * Setter for Identifier.
     * This is the payment identifier and it is only used for ApplePay and AndroidPay.
     * @param identifier Value for String
     */
    @JsonSetter("identifier")
    public void setIdentifier(String identifier) {
        this.identifier = identifier;
    }

    /**
     * Getter for Network.
     * This is the payment network (e.g. Visa, Mastercard) and it is only used for ApplePay and
     * AndroidPay.
     * @return Returns the String
     */
    @JsonGetter("network")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getNetwork() {
        return network;
    }

    /**
     * Setter for Network.
     * This is the payment network (e.g. Visa, Mastercard) and it is only used for ApplePay and
     * AndroidPay.
     * @param network Value for String
     */
    @JsonSetter("network")
    public void setNetwork(String network) {
        this.network = network;
    }

    /**
     * Getter for CardIdentifier.
     * This is only relevant for transactions made by B2B customers using the Shell Card payment
     * method. The ‘cardIdentifier’ is the unique identifier provided by Commercial Fleet and shared
     * with the Shell mobile payments platform. This reference ID is used in interactions with the
     * Commercial Fleet application to retrieve the fueling token - use the cardIdentifier when
     * requesting a DPAN.
     * @return Returns the String
     */
    @JsonGetter("cardIdentifier")
    public String getCardIdentifier() {
        return cardIdentifier;
    }

    /**
     * Setter for CardIdentifier.
     * This is only relevant for transactions made by B2B customers using the Shell Card payment
     * method. The ‘cardIdentifier’ is the unique identifier provided by Commercial Fleet and shared
     * with the Shell mobile payments platform. This reference ID is used in interactions with the
     * Commercial Fleet application to retrieve the fueling token - use the cardIdentifier when
     * requesting a DPAN.
     * @param cardIdentifier Value for String
     */
    @JsonSetter("cardIdentifier")
    public void setCardIdentifier(String cardIdentifier) {
        this.cardIdentifier = cardIdentifier;
    }

    /**
     * Getter for Odometer.
     * This is only relevant for transactions made by B2B customers using a Shell Card payment
     * method. During set up of the user’s Shell Card it’s possible to configure the card such that
     * users are forced to provide an odometer reading before a Sale can begin processing. This
     * field must be filled if the B2B user’s Shell Card has been configured this way but will be
     * left blank in all other cases.
     * @return Returns the String
     */
    @JsonGetter("odometer")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getOdometer() {
        return odometer;
    }

    /**
     * Setter for Odometer.
     * This is only relevant for transactions made by B2B customers using a Shell Card payment
     * method. During set up of the user’s Shell Card it’s possible to configure the card such that
     * users are forced to provide an odometer reading before a Sale can begin processing. This
     * field must be filled if the B2B user’s Shell Card has been configured this way but will be
     * left blank in all other cases.
     * @param odometer Value for String
     */
    @JsonSetter("odometer")
    public void setOdometer(String odometer) {
        this.odometer = odometer;
    }

    /**
     * Getter for FleetId.
     * Only relevant if Customer attempting to pay with B2B Shell Card. Customers attempting to pay
     * with a B2B Shell Card may have to specify their Fleet ID as an extra authorisation/security
     * step. Shell Card configuration will determine whether or not Fleet ID needs to be provided.
     * Please note this field is a 6 character numeric field.
     * @return Returns the String
     */
    @JsonGetter("fleetId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getFleetId() {
        return fleetId;
    }

    /**
     * Setter for FleetId.
     * Only relevant if Customer attempting to pay with B2B Shell Card. Customers attempting to pay
     * with a B2B Shell Card may have to specify their Fleet ID as an extra authorisation/security
     * step. Shell Card configuration will determine whether or not Fleet ID needs to be provided.
     * Please note this field is a 6 character numeric field.
     * @param fleetId Value for String
     */
    @JsonSetter("fleetId")
    public void setFleetId(String fleetId) {
        this.fleetId = fleetId;
    }

    /**
     * Getter for ExternalRefId.
     * This is only used for transactions made by B2B customers using the Shell Card payment method.
     * In this scenario the expectation is that :\ a B2B entity has been successfully created that
     * includes the external party’s reference for the entity (e.g. Contract Number, VRN, customer
     * email); a new Shell Card (SFC) has been successfully created; and Shell Card and B2B Entity
     * have been linked. externalRefId refers to the 3rd Parties External Reference for the B2B
     * entity and will therefore be used to verify the Customer and SFC before attempting to process
     * a payment using the SFC card
     * @return Returns the String
     */
    @JsonGetter("externalRefId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getExternalRefId() {
        return externalRefId;
    }

    /**
     * Setter for ExternalRefId.
     * This is only used for transactions made by B2B customers using the Shell Card payment method.
     * In this scenario the expectation is that :\ a B2B entity has been successfully created that
     * includes the external party’s reference for the entity (e.g. Contract Number, VRN, customer
     * email); a new Shell Card (SFC) has been successfully created; and Shell Card and B2B Entity
     * have been linked. externalRefId refers to the 3rd Parties External Reference for the B2B
     * entity and will therefore be used to verify the Customer and SFC before attempting to process
     * a payment using the SFC card
     * @param externalRefId Value for String
     */
    @JsonSetter("externalRefId")
    public void setExternalRefId(String externalRefId) {
        this.externalRefId = externalRefId;
    }

    /**
     * Converts this PaymentProperties into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "PaymentProperties [" + "cardIdentifier=" + cardIdentifier + ", paymentType="
                + paymentType + ", clientMetadataId=" + clientMetadataId + ", token=" + token
                + ", identifier=" + identifier + ", network=" + network + ", odometer=" + odometer
                + ", fleetId=" + fleetId + ", externalRefId=" + externalRefId + "]";
    }

    /**
     * Builds a new {@link PaymentProperties.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link PaymentProperties.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(cardIdentifier)
                .paymentType(getPaymentType())
                .clientMetadataId(getClientMetadataId())
                .token(getToken())
                .identifier(getIdentifier())
                .network(getNetwork())
                .odometer(getOdometer())
                .fleetId(getFleetId())
                .externalRefId(getExternalRefId());
        return builder;
    }

    /**
     * Class to build instances of {@link PaymentProperties}.
     */
    public static class Builder {
        private String cardIdentifier;
        private String paymentType;
        private String clientMetadataId;
        private String token;
        private String identifier;
        private String network;
        private String odometer;
        private String fleetId;
        private String externalRefId;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  cardIdentifier  String value for cardIdentifier.
         */
        public Builder(String cardIdentifier) {
            this.cardIdentifier = cardIdentifier;
        }

        /**
         * Setter for cardIdentifier.
         * @param  cardIdentifier  String value for cardIdentifier.
         * @return Builder
         */
        public Builder cardIdentifier(String cardIdentifier) {
            this.cardIdentifier = cardIdentifier;
            return this;
        }

        /**
         * Setter for paymentType.
         * @param  paymentType  String value for paymentType.
         * @return Builder
         */
        public Builder paymentType(String paymentType) {
            this.paymentType = paymentType;
            return this;
        }

        /**
         * Setter for clientMetadataId.
         * @param  clientMetadataId  String value for clientMetadataId.
         * @return Builder
         */
        public Builder clientMetadataId(String clientMetadataId) {
            this.clientMetadataId = clientMetadataId;
            return this;
        }

        /**
         * Setter for token.
         * @param  token  String value for token.
         * @return Builder
         */
        public Builder token(String token) {
            this.token = token;
            return this;
        }

        /**
         * Setter for identifier.
         * @param  identifier  String value for identifier.
         * @return Builder
         */
        public Builder identifier(String identifier) {
            this.identifier = identifier;
            return this;
        }

        /**
         * Setter for network.
         * @param  network  String value for network.
         * @return Builder
         */
        public Builder network(String network) {
            this.network = network;
            return this;
        }

        /**
         * Setter for odometer.
         * @param  odometer  String value for odometer.
         * @return Builder
         */
        public Builder odometer(String odometer) {
            this.odometer = odometer;
            return this;
        }

        /**
         * Setter for fleetId.
         * @param  fleetId  String value for fleetId.
         * @return Builder
         */
        public Builder fleetId(String fleetId) {
            this.fleetId = fleetId;
            return this;
        }

        /**
         * Setter for externalRefId.
         * @param  externalRefId  String value for externalRefId.
         * @return Builder
         */
        public Builder externalRefId(String externalRefId) {
            this.externalRefId = externalRefId;
            return this;
        }

        /**
         * Builds a new {@link PaymentProperties} object using the set fields.
         * @return {@link PaymentProperties}
         */
        public PaymentProperties build() {
            return new PaymentProperties(cardIdentifier, paymentType, clientMetadataId, token,
                    identifier, network, odometer, fleetId, externalRefId);
        }
    }
}
