/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for PrepareFuelingRequest type.
 */
public class PrepareFuelingRequest {
    private double latitude;
    private double longitude;
    private Double maximumFuelingAmount;
    private String stationId;
    private String pumpId;
    private List<LoyaltyDetails> loyaltyDetails;
    private String sourceApplication;
    private String deviceType;
    private List<PaymentDetailsItems> paymentDetails;
    private List<PrepareFuelingRequestDeviceDetailsItems> deviceDetails;

    /**
     * Default constructor.
     */
    public PrepareFuelingRequest() {
    }

    /**
     * Initialization constructor.
     * @param  latitude  double value for latitude.
     * @param  longitude  double value for longitude.
     * @param  stationId  String value for stationId.
     * @param  pumpId  String value for pumpId.
     * @param  sourceApplication  String value for sourceApplication.
     * @param  paymentDetails  List of PaymentDetailsItems value for paymentDetails.
     * @param  maximumFuelingAmount  Double value for maximumFuelingAmount.
     * @param  loyaltyDetails  List of LoyaltyDetails value for loyaltyDetails.
     * @param  deviceType  String value for deviceType.
     * @param  deviceDetails  List of PrepareFuelingRequestDeviceDetailsItems value for
     *         deviceDetails.
     */
    public PrepareFuelingRequest(
            double latitude,
            double longitude,
            String stationId,
            String pumpId,
            String sourceApplication,
            List<PaymentDetailsItems> paymentDetails,
            Double maximumFuelingAmount,
            List<LoyaltyDetails> loyaltyDetails,
            String deviceType,
            List<PrepareFuelingRequestDeviceDetailsItems> deviceDetails) {
        this.latitude = latitude;
        this.longitude = longitude;
        this.maximumFuelingAmount = maximumFuelingAmount;
        this.stationId = stationId;
        this.pumpId = pumpId;
        this.loyaltyDetails = loyaltyDetails;
        this.sourceApplication = sourceApplication;
        this.deviceType = deviceType;
        this.paymentDetails = paymentDetails;
        this.deviceDetails = deviceDetails;
    }

    /**
     * Getter for Latitude.
     * The user’s current latitude
     * @return Returns the double
     */
    @JsonGetter("latitude")
    public double getLatitude() {
        return latitude;
    }

    /**
     * Setter for Latitude.
     * The user’s current latitude
     * @param latitude Value for double
     */
    @JsonSetter("latitude")
    public void setLatitude(double latitude) {
        this.latitude = latitude;
    }

    /**
     * Getter for Longitude.
     * The user’s current longitude
     * @return Returns the double
     */
    @JsonGetter("longitude")
    public double getLongitude() {
        return longitude;
    }

    /**
     * Setter for Longitude.
     * The user’s current longitude
     * @param longitude Value for double
     */
    @JsonSetter("longitude")
    public void setLongitude(double longitude) {
        this.longitude = longitude;
    }

    /**
     * Getter for MaximumFuelingAmount.
     * The maximum fuelling amount that can be purchased. If the prepare fuelling is successful and
     * the Customer starts fuelling their car, the pump will cut off once this threshold is reached.
     * For B2B customers a maximum ceiling is set against their Shell Card. As a result, this can be
     * left blank for B2B customers. If a value is provided it cannot be zero or lower and values
     * that exceed ceiling will be ignored.
     * @return Returns the Double
     */
    @JsonGetter("maximumFuelingAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getMaximumFuelingAmount() {
        return maximumFuelingAmount;
    }

    /**
     * Setter for MaximumFuelingAmount.
     * The maximum fuelling amount that can be purchased. If the prepare fuelling is successful and
     * the Customer starts fuelling their car, the pump will cut off once this threshold is reached.
     * For B2B customers a maximum ceiling is set against their Shell Card. As a result, this can be
     * left blank for B2B customers. If a value is provided it cannot be zero or lower and values
     * that exceed ceiling will be ignored.
     * @param maximumFuelingAmount Value for Double
     */
    @JsonSetter("maximumFuelingAmount")
    public void setMaximumFuelingAmount(Double maximumFuelingAmount) {
        this.maximumFuelingAmount = maximumFuelingAmount;
    }

    /**
     * Getter for StationId.
     * Expectation is that a user has to be located at a Shell petrol station in order to make this
     * call. A user is recognised as being located at a Shell station if the user’s current location
     * (as determined by GPS) is within 300 meters of a Shell station. Expectation is that requester
     * will have established the Shell petrol station the user is located at prior to making this
     * call by calling Station Locator APIs. The API will use stationId and siteCountry/GPS to
     * verify the user is The user’s current latitude genuinely located at the specified Station.
     * ‘mpp_station_id’ of the Station Locator API should be used. Leading ‘0’ should be dropped and
     * only last four digits, should be used. E.G. for ‘00123’, only ‘0123’ should be used and for
     * ‘04567’ only ‘4567’ should be used.
     * @return Returns the String
     */
    @JsonGetter("stationId")
    public String getStationId() {
        return stationId;
    }

    /**
     * Setter for StationId.
     * Expectation is that a user has to be located at a Shell petrol station in order to make this
     * call. A user is recognised as being located at a Shell station if the user’s current location
     * (as determined by GPS) is within 300 meters of a Shell station. Expectation is that requester
     * will have established the Shell petrol station the user is located at prior to making this
     * call by calling Station Locator APIs. The API will use stationId and siteCountry/GPS to
     * verify the user is The user’s current latitude genuinely located at the specified Station.
     * ‘mpp_station_id’ of the Station Locator API should be used. Leading ‘0’ should be dropped and
     * only last four digits, should be used. E.G. for ‘00123’, only ‘0123’ should be used and for
     * ‘04567’ only ‘4567’ should be used.
     * @param stationId Value for String
     */
    @JsonSetter("stationId")
    public void setStationId(String stationId) {
        this.stationId = stationId;
    }

    /**
     * Getter for PumpId.
     * A two digit numeric number of the pump as marked on the forecourt (e.g. pump number 12)
     * @return Returns the String
     */
    @JsonGetter("pumpId")
    public String getPumpId() {
        return pumpId;
    }

    /**
     * Setter for PumpId.
     * A two digit numeric number of the pump as marked on the forecourt (e.g. pump number 12)
     * @param pumpId Value for String
     */
    @JsonSetter("pumpId")
    public void setPumpId(String pumpId) {
        this.pumpId = pumpId;
    }

    /**
     * Getter for LoyaltyDetails.
     * Object containing Loyalty details
     * @return Returns the List of LoyaltyDetails
     */
    @JsonGetter("loyaltyDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<LoyaltyDetails> getLoyaltyDetails() {
        return loyaltyDetails;
    }

    /**
     * Setter for LoyaltyDetails.
     * Object containing Loyalty details
     * @param loyaltyDetails Value for List of LoyaltyDetails
     */
    @JsonSetter("loyaltyDetails")
    public void setLoyaltyDetails(List<LoyaltyDetails> loyaltyDetails) {
        this.loyaltyDetails = loyaltyDetails;
    }

    /**
     * Getter for SourceApplication.
     * The ID of the source application making this call. Each 3rd Party will be issued with its own
     * sourceApp ID that must be specified correctly here * 3rdParty_App_Archetype
     * @return Returns the String
     */
    @JsonGetter("sourceApplication")
    public String getSourceApplication() {
        return sourceApplication;
    }

    /**
     * Setter for SourceApplication.
     * The ID of the source application making this call. Each 3rd Party will be issued with its own
     * sourceApp ID that must be specified correctly here * 3rdParty_App_Archetype
     * @param sourceApplication Value for String
     */
    @JsonSetter("sourceApplication")
    public void setSourceApplication(String sourceApplication) {
        this.sourceApplication = sourceApplication;
    }

    /**
     * Getter for DeviceType.
     * The type of device making this call. Permitted values for deviceType: * car * phone
     * @return Returns the String
     */
    @JsonGetter("deviceType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDeviceType() {
        return deviceType;
    }

    /**
     * Setter for DeviceType.
     * The type of device making this call. Permitted values for deviceType: * car * phone
     * @param deviceType Value for String
     */
    @JsonSetter("deviceType")
    public void setDeviceType(String deviceType) {
        this.deviceType = deviceType;
    }

    /**
     * Getter for PaymentDetails.
     * Object containing Payment details
     * @return Returns the List of PaymentDetailsItems
     */
    @JsonGetter("paymentDetails")
    public List<PaymentDetailsItems> getPaymentDetails() {
        return paymentDetails;
    }

    /**
     * Setter for PaymentDetails.
     * Object containing Payment details
     * @param paymentDetails Value for List of PaymentDetailsItems
     */
    @JsonSetter("paymentDetails")
    public void setPaymentDetails(List<PaymentDetailsItems> paymentDetails) {
        this.paymentDetails = paymentDetails;
    }

    /**
     * Getter for DeviceDetails.
     * Object containing device details
     * @return Returns the List of PrepareFuelingRequestDeviceDetailsItems
     */
    @JsonGetter("deviceDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<PrepareFuelingRequestDeviceDetailsItems> getDeviceDetails() {
        return deviceDetails;
    }

    /**
     * Setter for DeviceDetails.
     * Object containing device details
     * @param deviceDetails Value for List of PrepareFuelingRequestDeviceDetailsItems
     */
    @JsonSetter("deviceDetails")
    public void setDeviceDetails(List<PrepareFuelingRequestDeviceDetailsItems> deviceDetails) {
        this.deviceDetails = deviceDetails;
    }

    /**
     * Converts this PrepareFuelingRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "PrepareFuelingRequest [" + "latitude=" + latitude + ", longitude=" + longitude
                + ", stationId=" + stationId + ", pumpId=" + pumpId + ", sourceApplication="
                + sourceApplication + ", paymentDetails=" + paymentDetails
                + ", maximumFuelingAmount=" + maximumFuelingAmount + ", loyaltyDetails="
                + loyaltyDetails + ", deviceType=" + deviceType + ", deviceDetails=" + deviceDetails
                + "]";
    }

    /**
     * Builds a new {@link PrepareFuelingRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link PrepareFuelingRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(latitude, longitude, stationId, pumpId, sourceApplication,
                paymentDetails)
                .maximumFuelingAmount(getMaximumFuelingAmount())
                .loyaltyDetails(getLoyaltyDetails())
                .deviceType(getDeviceType())
                .deviceDetails(getDeviceDetails());
        return builder;
    }

    /**
     * Class to build instances of {@link PrepareFuelingRequest}.
     */
    public static class Builder {
        private double latitude;
        private double longitude;
        private String stationId;
        private String pumpId;
        private String sourceApplication;
        private List<PaymentDetailsItems> paymentDetails;
        private Double maximumFuelingAmount;
        private List<LoyaltyDetails> loyaltyDetails;
        private String deviceType;
        private List<PrepareFuelingRequestDeviceDetailsItems> deviceDetails;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  latitude  double value for latitude.
         * @param  longitude  double value for longitude.
         * @param  stationId  String value for stationId.
         * @param  pumpId  String value for pumpId.
         * @param  sourceApplication  String value for sourceApplication.
         * @param  paymentDetails  List of PaymentDetailsItems value for paymentDetails.
         */
        public Builder(double latitude, double longitude, String stationId, String pumpId,
                String sourceApplication, List<PaymentDetailsItems> paymentDetails) {
            this.latitude = latitude;
            this.longitude = longitude;
            this.stationId = stationId;
            this.pumpId = pumpId;
            this.sourceApplication = sourceApplication;
            this.paymentDetails = paymentDetails;
        }

        /**
         * Setter for latitude.
         * @param  latitude  double value for latitude.
         * @return Builder
         */
        public Builder latitude(double latitude) {
            this.latitude = latitude;
            return this;
        }

        /**
         * Setter for longitude.
         * @param  longitude  double value for longitude.
         * @return Builder
         */
        public Builder longitude(double longitude) {
            this.longitude = longitude;
            return this;
        }

        /**
         * Setter for stationId.
         * @param  stationId  String value for stationId.
         * @return Builder
         */
        public Builder stationId(String stationId) {
            this.stationId = stationId;
            return this;
        }

        /**
         * Setter for pumpId.
         * @param  pumpId  String value for pumpId.
         * @return Builder
         */
        public Builder pumpId(String pumpId) {
            this.pumpId = pumpId;
            return this;
        }

        /**
         * Setter for sourceApplication.
         * @param  sourceApplication  String value for sourceApplication.
         * @return Builder
         */
        public Builder sourceApplication(String sourceApplication) {
            this.sourceApplication = sourceApplication;
            return this;
        }

        /**
         * Setter for paymentDetails.
         * @param  paymentDetails  List of PaymentDetailsItems value for paymentDetails.
         * @return Builder
         */
        public Builder paymentDetails(List<PaymentDetailsItems> paymentDetails) {
            this.paymentDetails = paymentDetails;
            return this;
        }

        /**
         * Setter for maximumFuelingAmount.
         * @param  maximumFuelingAmount  Double value for maximumFuelingAmount.
         * @return Builder
         */
        public Builder maximumFuelingAmount(Double maximumFuelingAmount) {
            this.maximumFuelingAmount = maximumFuelingAmount;
            return this;
        }

        /**
         * Setter for loyaltyDetails.
         * @param  loyaltyDetails  List of LoyaltyDetails value for loyaltyDetails.
         * @return Builder
         */
        public Builder loyaltyDetails(List<LoyaltyDetails> loyaltyDetails) {
            this.loyaltyDetails = loyaltyDetails;
            return this;
        }

        /**
         * Setter for deviceType.
         * @param  deviceType  String value for deviceType.
         * @return Builder
         */
        public Builder deviceType(String deviceType) {
            this.deviceType = deviceType;
            return this;
        }

        /**
         * Setter for deviceDetails.
         * @param  deviceDetails  List of PrepareFuelingRequestDeviceDetailsItems value for
         *         deviceDetails.
         * @return Builder
         */
        public Builder deviceDetails(
                List<PrepareFuelingRequestDeviceDetailsItems> deviceDetails) {
            this.deviceDetails = deviceDetails;
            return this;
        }

        /**
         * Builds a new {@link PrepareFuelingRequest} object using the set fields.
         * @return {@link PrepareFuelingRequest}
         */
        public PrepareFuelingRequest build() {
            return new PrepareFuelingRequest(latitude, longitude, stationId, pumpId,
                    sourceApplication, paymentDetails, maximumFuelingAmount, loyaltyDetails,
                    deviceType, deviceDetails);
        }
    }
}
