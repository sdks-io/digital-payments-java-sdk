/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest;

import com.shell.apitest.authentication.MppTokenCredentials;
import com.shell.apitest.authentication.MppTokenManager;
import com.shell.apitest.authentication.MppTokenModel;
import com.shell.apitest.authentication.OAuthTokenPostCredentials;
import com.shell.apitest.authentication.OAuthTokenPostManager;
import com.shell.apitest.authentication.OAuthTokenPostModel;
import com.shell.apitest.controllers.DigitalPaymentEnablementController;
import com.shell.apitest.controllers.FuelingController;
import com.shell.apitest.controllers.PartnerNotificationController;
import com.shell.apitest.controllers.ShellAPIPlatformSecurityAuthenticationController;
import com.shell.apitest.controllers.StationLocatorController;
import com.shell.apitest.http.client.HttpCallback;
import com.shell.apitest.http.client.HttpClientConfiguration;
import com.shell.apitest.http.client.ReadonlyHttpClientConfiguration;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.authentication.Authentication;
import io.apimatic.coreinterfaces.compatibility.CompatibilityFactory;
import io.apimatic.coreinterfaces.http.HttpClient;
import io.apimatic.okhttpclient.adapter.OkClient;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Supplier;

/**
 * Gateway class for the library.
 * This class acts as a factory for Controllers.
 * It holds the state of the SDK.
 */
public final class ShellEVClient implements Configuration {

    /**
     * Private store for controllers.
     */
    private ShellAPIPlatformSecurityAuthenticationController shellAPIPlatformSecurityAuthentication;
    private DigitalPaymentEnablementController digitalPaymentEnablement;
    private StationLocatorController stationLocator;
    private FuelingController fueling;
    private PartnerNotificationController partnerNotification;

    private static final CompatibilityFactory compatibilityFactory = new CompatibilityFactoryImpl();

    private static String userAgent = "APIMATIC 3.0";

    /**
     * Current API environment.
     */
    private final Environment environment;

    /**
     * The HTTP Client instance to use for making HTTP requests.
     */
    private final HttpClient httpClient;

    /**
     * Http Client Configuration instance.
     */
    private final ReadonlyHttpClientConfiguration httpClientConfig;

    /**
     * MppTokenManager.
     */
    private MppTokenManager mppTokenManager;

    /**
     * The instance of MppTokenModel.
     */
    private MppTokenModel mppTokenModel;

    /**
     * OAuthTokenPostManager.
     */
    private OAuthTokenPostManager oAuthTokenPostManager;

    /**
     * The instance of OAuthTokenPostModel.
     */
    private OAuthTokenPostModel oAuthTokenPostModel;

    /**
     * Map of authentication Managers.
     */
    private Map<String, Authentication> authentications = new HashMap<String, Authentication>();

    /**
     * Callback to be called before and after the HTTP call for an endpoint is made.
     */
    private final HttpCallback httpCallback;

    private ShellEVClient(Environment environment, HttpClient httpClient,
            ReadonlyHttpClientConfiguration httpClientConfig, MppTokenModel mppTokenModel,
            OAuthTokenPostModel oAuthTokenPostModel, HttpCallback httpCallback) {
        this.environment = environment;
        this.httpClient = httpClient;
        this.httpClientConfig = httpClientConfig;
        this.httpCallback = httpCallback;

        this.mppTokenModel = mppTokenModel;
        this.oAuthTokenPostModel = oAuthTokenPostModel;

        this.mppTokenManager = new MppTokenManager(mppTokenModel);
        this.authentications.put("MppToken", mppTokenManager);

        this.oAuthTokenPostManager = new OAuthTokenPostManager(oAuthTokenPostModel);
        this.authentications.put("oAuthTokenPost", oAuthTokenPostManager);

        GlobalConfiguration globalConfig = new GlobalConfiguration.Builder()
                .httpClient(httpClient).baseUri(server -> getBaseUri(server))
                .compatibilityFactory(compatibilityFactory)
                .authentication(this.authentications)
                .callback(httpCallback)
                .userAgent(userAgent)
                .build();
        shellAPIPlatformSecurityAuthentication = new ShellAPIPlatformSecurityAuthenticationController(
                globalConfig);
        digitalPaymentEnablement = new DigitalPaymentEnablementController(globalConfig);
        stationLocator = new StationLocatorController(globalConfig);
        fueling = new FuelingController(globalConfig);
        partnerNotification = new PartnerNotificationController(globalConfig);
    }

    /**
     * Shutdown the underlying HttpClient instance.
     */
    public static void shutdown() {
        OkClient.shutdown();
    }

    /**
     * Get the instance of ShellAPIPlatformSecurityAuthenticationController.
     * @return shellAPIPlatformSecurityAuthentication
     */
    public ShellAPIPlatformSecurityAuthenticationController getShellAPIPlatformSecurityAuthenticationController() {
        return shellAPIPlatformSecurityAuthentication;
    }

    /**
     * Get the instance of DigitalPaymentEnablementController.
     * @return digitalPaymentEnablement
     */
    public DigitalPaymentEnablementController getDigitalPaymentEnablementController() {
        return digitalPaymentEnablement;
    }

    /**
     * Get the instance of StationLocatorController.
     * @return stationLocator
     */
    public StationLocatorController getStationLocatorController() {
        return stationLocator;
    }

    /**
     * Get the instance of FuelingController.
     * @return fueling
     */
    public FuelingController getFuelingController() {
        return fueling;
    }

    /**
     * Get the instance of PartnerNotificationController.
     * @return partnerNotification
     */
    public PartnerNotificationController getPartnerNotificationController() {
        return partnerNotification;
    }

    /**
     * Current API environment.
     * @return environment
     */
    public Environment getEnvironment() {
        return environment;
    }

    /**
     * The HTTP Client instance to use for making HTTP requests.
     * @return httpClient
     */
    private HttpClient getHttpClient() {
        return httpClient;
    }

    /**
     * Http Client Configuration instance.
     * @return httpClientConfig
     */
    public ReadonlyHttpClientConfiguration getHttpClientConfig() {
        return httpClientConfig;
    }

    /**
     * The credentials to use with MppToken.
     * @return mppTokenCredentials
     */
    public MppTokenCredentials getMppTokenCredentials() {
        return mppTokenManager;
    }

    /**
     * The auth credential model for MppToken.
     * @return the instance of MppTokenModel
     */
    public MppTokenModel getMppTokenModel() {
        return mppTokenModel;
    }
    /**
     * The credentials to use with OAuthTokenPost.
     * @return oAuthTokenPostCredentials
     */
    public OAuthTokenPostCredentials getOAuthTokenPostCredentials() {
        return oAuthTokenPostManager;
    }

    /**
     * The auth credential model for OAuthTokenPost.
     * @return the instance of OAuthTokenPostModel
     */
    public OAuthTokenPostModel getOAuthTokenPostModel() {
        return oAuthTokenPostModel;
    }
    /**
     * The timeout to use for making HTTP requests.
     * @deprecated This method will be removed in a future version. Use
     *             {@link #getHttpClientConfig()} instead.
     *
     * @return timeout
     */
    @Deprecated
    public long timeout() {
        return httpClientConfig.getTimeout();
    }

    /**
     * Get base URI by current environment.
     * @param server Server for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(Server server) {
        return environmentMapper(environment, server);
    }

    /**
     * Get base URI by current environment.
     * @return Processed base URI
     */
    public String getBaseUri() {
        return getBaseUri(Server.ENUM_DEFAULT);
    }


    /**
     * Get base URI by current environment.
     * 
     * @param server string for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(String server) {
        return getBaseUri(Server.fromString(server));
    }


    /**
     * Base URLs by environment and server aliases.
     * @param environment Environment for which to get the base URI
     * @param server Server for which to get the base URI
     * @return base URL
     */
    private static String environmentMapper(Environment environment, Server server) {
        if (environment.equals(Environment.PRODUCTION)) {
            if (server.equals(Server.ENUM_DEFAULT)) {
                return "https://api-test.shell.com/ShellDigitalCommerceServices/Payments/B2B/Partner";
            }
        }
        return "https://api-test.shell.com/ShellDigitalCommerceServices/Payments/B2B/Partner";
    }

    /**
     * Converts this ShellEVClient into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ShellEVClient [" + "environment=" + environment + ", httpClientConfig="
                + httpClientConfig + ", authentications=" + authentications + "]";
    }

    /**
     * Builds a new {@link ShellEVClient.Builder} object.
     * Creates the instance with the state of the current client.
     * @return a new {@link ShellEVClient.Builder} object
     */
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.environment = getEnvironment();
        builder.httpClient = getHttpClient();
        builder.mppTokenCredentials(getMppTokenModel()
                .toBuilder().build());
        builder.oAuthTokenPostCredentials(getOAuthTokenPostModel()
                .toBuilder().build());
        builder.httpCallback = httpCallback;
        builder.httpClientConfig(() -> ((HttpClientConfiguration) httpClientConfig).newBuilder());
        return builder;
    }

    /**
     * Class to build instances of {@link ShellEVClient}.
     */
    public static class Builder {

        private Environment environment = Environment.PRODUCTION;
        private HttpClient httpClient;
        private MppTokenModel mppTokenModel = new MppTokenModel.Builder("").build();
        private OAuthTokenPostModel oAuthTokenPostModel =
                new OAuthTokenPostModel.Builder("").build();
        private HttpCallback httpCallback = null;
        private HttpClientConfiguration.Builder httpClientConfigBuilder =
                new HttpClientConfiguration.Builder();


        /**
         * Credentials setter for MppTokenCredentials.
         * @param mppTokenModel The instance of MppTokenModel.
         * @return The current instance of builder.
         */
        public Builder mppTokenCredentials(MppTokenModel mppTokenModel) {
            this.mppTokenModel = mppTokenModel;
            return this;
        }

        /**
         * Credentials setter for OAuthTokenPostCredentials.
         * @param oAuthTokenPostModel The instance of OAuthTokenPostModel.
         * @return The current instance of builder.
         */
        public Builder oAuthTokenPostCredentials(OAuthTokenPostModel oAuthTokenPostModel) {
            this.oAuthTokenPostModel = oAuthTokenPostModel;
            return this;
        }

        /**
         * Current API environment.
         * @param environment The environment for client.
         * @return Builder
         */
        public Builder environment(Environment environment) {
            this.environment = environment;
            return this;
        }

        /**
         * The timeout to use for making HTTP requests.
         * @deprecated This method will be removed in a future version. Use
         *             {@link #httpClientConfig(Consumer) httpClientConfig} instead.
         * @param timeout must be greater then 0.
         * @return Builder
         */
        @Deprecated
        public Builder timeout(long timeout) {
            this.httpClientConfigBuilder.timeout(timeout);
            return this;
        }

        /**
         * HttpCallback.
         * @param httpCallback Callback to be called before and after the HTTP call.
         * @return Builder
         */
        public Builder httpCallback(HttpCallback httpCallback) {
            this.httpCallback = httpCallback;
            return this;
        }

        /**
         * Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param action Consumer for the builder of httpClientConfiguration.
         * @return Builder
         */
        public Builder httpClientConfig(Consumer<HttpClientConfiguration.Builder> action) {
            action.accept(httpClientConfigBuilder);
            return this;
        }

        /**
         * Private Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param supplier Supplier for the builder of httpClientConfiguration.
         * @return Builder
         */
        private Builder httpClientConfig(Supplier<HttpClientConfiguration.Builder> supplier) {
            httpClientConfigBuilder = supplier.get();
            return this;
        }

        /**
         * Builds a new ShellEVClient object using the set fields.
         * @return ShellEVClient
         */
        public ShellEVClient build() {
            HttpClientConfiguration httpClientConfig = httpClientConfigBuilder.build();
            httpClient = new OkClient(httpClientConfig.getConfiguration(), compatibilityFactory);

            return new ShellEVClient(environment, httpClient, httpClientConfig, mppTokenModel,
                    oAuthTokenPostModel, httpCallback);
        }
    }
}