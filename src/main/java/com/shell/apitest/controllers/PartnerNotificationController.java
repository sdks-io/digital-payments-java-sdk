/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.shell.apitest.ApiHelper;
import com.shell.apitest.Server;
import com.shell.apitest.exceptions.AccessTokenErrorException;
import com.shell.apitest.exceptions.ApiException;
import com.shell.apitest.http.request.HttpMethod;
import com.shell.apitest.models.AccessTokenResponse;
import com.shell.apitest.models.CancelFuelingRequest;
import com.shell.apitest.models.FinaliseFuelingRequest;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class PartnerNotificationController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public PartnerNotificationController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * To access the Partner’s endpoints, for sending callback messages, Shell will need to connect
     * to the Partner API end points. It is recemmended that the partner offers OAuth 2.0 as a
     * standard for call back APIs and will require the OAuth 2.0 token for authentication. Note
     * this needs to be implemented over HTTPS.
     * @param  grantType  Required parameter: In OAuth 2.0, the term grant typee refers to the way
     *         an application gets an access token. OAuth 2.0 defines several grant types, including
     *         the authorization code flow.
     * @param  clientId  Required parameter: After registering your app, you will receive a client
     *         ID and a client secret. The client ID is considered public information, and is used
     *         to build login URLs, or included in Javascript source code on a page.
     * @param  clientSecret  Required parameter: After registering your app, you will receive a
     *         client ID and a client secret. The client ID is considered public information, and is
     *         used to build login URLs, or included in Javascript source code on a page. The client
     *         secret must be kept confidential.
     * @return    Returns the AccessTokenResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AccessTokenResponse partnerToken(
            final String grantType,
            final String clientId,
            final String clientSecret) throws ApiException, IOException {
        return preparePartnerTokenRequest(grantType, clientId, clientSecret).execute();
    }

    /**
     * To access the Partner’s endpoints, for sending callback messages, Shell will need to connect
     * to the Partner API end points. It is recemmended that the partner offers OAuth 2.0 as a
     * standard for call back APIs and will require the OAuth 2.0 token for authentication. Note
     * this needs to be implemented over HTTPS.
     * @param  grantType  Required parameter: In OAuth 2.0, the term grant typee refers to the way
     *         an application gets an access token. OAuth 2.0 defines several grant types, including
     *         the authorization code flow.
     * @param  clientId  Required parameter: After registering your app, you will receive a client
     *         ID and a client secret. The client ID is considered public information, and is used
     *         to build login URLs, or included in Javascript source code on a page.
     * @param  clientSecret  Required parameter: After registering your app, you will receive a
     *         client ID and a client secret. The client ID is considered public information, and is
     *         used to build login URLs, or included in Javascript source code on a page. The client
     *         secret must be kept confidential.
     * @return    Returns the AccessTokenResponse response from the API call
     */
    public CompletableFuture<AccessTokenResponse> partnerTokenAsync(
            final String grantType,
            final String clientId,
            final String clientSecret) {
        try { 
            return preparePartnerTokenRequest(grantType, clientId, clientSecret).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for partnerToken.
     */
    private ApiCall<AccessTokenResponse, ApiException> preparePartnerTokenRequest(
            final String grantType,
            final String clientId,
            final String clientSecret) throws IOException {
        return new ApiCall.Builder<AccessTokenResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/token")
                        .formParam(param -> param.key("grant_type")
                                .value(grantType))
                        .formParam(param -> param.key("client_id")
                                .value(clientId))
                        .formParam(param -> param.key("client_secret")
                                .value(clientSecret))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/x-www-form-urlencoded").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, AccessTokenResponse.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Unauthorized",
                                (reason, context) -> new AccessTokenErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Enables Shell to inform partner of the successful completion of a transaction. Note this
     * needs to be implemented over HTTPS.
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void finaliseFueling(
            final FinaliseFuelingRequest body) throws ApiException, IOException {
        prepareFinaliseFuelingRequest(body).execute();
    }

    /**
     * Enables Shell to inform partner of the successful completion of a transaction. Note this
     * needs to be implemented over HTTPS.
     * @param  body  Optional parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> finaliseFuelingAsync(
            final FinaliseFuelingRequest body) {
        try { 
            return prepareFinaliseFuelingRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for finaliseFueling.
     */
    private ApiCall<Void, ApiException> prepareFinaliseFuelingRequest(
            final FinaliseFuelingRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/finaliseFueling")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Unauthorized",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Enables Shell to inform partner that a Mobile Payment transaction has been cancelled by Shell
     * as an error/issue occured. Note this needs to be implemented over HTTPS.
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void cancelFueling(
            final CancelFuelingRequest body) throws ApiException, IOException {
        prepareCancelFuelingRequest(body).execute();
    }

    /**
     * Enables Shell to inform partner that a Mobile Payment transaction has been cancelled by Shell
     * as an error/issue occured. Note this needs to be implemented over HTTPS.
     * @param  body  Optional parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> cancelFuelingAsync(
            final CancelFuelingRequest body) {
        try { 
            return prepareCancelFuelingRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for cancelFueling.
     */
    private ApiCall<Void, ApiException> prepareCancelFuelingRequest(
            final CancelFuelingRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/cancelFueling")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Unauthorized",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}