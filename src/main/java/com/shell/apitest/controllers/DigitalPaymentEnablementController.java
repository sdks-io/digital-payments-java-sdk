/*
 * ShellSmartPayAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.shell.apitest.ApiHelper;
import com.shell.apitest.Server;
import com.shell.apitest.exceptions.ApiException;
import com.shell.apitest.exceptions.PaymentEnablementErrorResponseException;
import com.shell.apitest.http.request.HttpMethod;
import com.shell.apitest.models.MobilePaymentRegistrationRequest;
import com.shell.apitest.models.PaymentEnablementResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DigitalPaymentEnablementController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public DigitalPaymentEnablementController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Generates a DPAN and stores the relationship between the Reference ID, DPAN and the real PAN.
     * This method is called during the customer registration process, ahead of any payment. The
     * Reference ID is an identifier chosen by the client system for mobile payment registration. It
     * must be unique in context of the client system, and is the key to obtaining and managing the
     * payment details later.
     * @param  body  Required parameter: Example:
     * @return    Returns the PaymentEnablementResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public PaymentEnablementResponse mpayV1TokensRefPut(
            final MobilePaymentRegistrationRequest body) throws ApiException, IOException {
        return prepareMpayV1TokensRefPutRequest(body).execute();
    }

    /**
     * Generates a DPAN and stores the relationship between the Reference ID, DPAN and the real PAN.
     * This method is called during the customer registration process, ahead of any payment. The
     * Reference ID is an identifier chosen by the client system for mobile payment registration. It
     * must be unique in context of the client system, and is the key to obtaining and managing the
     * payment details later.
     * @param  body  Required parameter: Example:
     * @return    Returns the PaymentEnablementResponse response from the API call
     */
    public CompletableFuture<PaymentEnablementResponse> mpayV1TokensRefPutAsync(
            final MobilePaymentRegistrationRequest body) {
        try { 
            return prepareMpayV1TokensRefPutRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for mpayV1TokensRefPut.
     */
    private ApiCall<PaymentEnablementResponse, ApiException> prepareMpayV1TokensRefPutRequest(
            final MobilePaymentRegistrationRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<PaymentEnablementResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SHELL.value())
                        .path("/PaymentEnablement/v1/ref")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuthTokenPost"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, PaymentEnablementResponse.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error Occurred. The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, invalid request message).",
                                (reason, context) -> new PaymentEnablementErrorResponseException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Unauthorized. The request has not been applied because it lacks valid authentication credentials for the target resource.",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden. The server understood the request but refuses to authorize it.",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Not Found. The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal Server Error. The server encountered an unexpected condition that prevented it from fulfilling the request.",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}